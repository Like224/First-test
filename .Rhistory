oaa_new_1
{
oaa_new_1 <- oaa %>% filter(species == i)
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
oaa_new_1
oaa_new_1
oaa_new_1 <- oaa%>%mutate(treat = treatment)  %>% unite(col = "group", c(loc, treat), sep = "")
oaa_new_1
for (i in unique(oaa_new_1$species))
{
oaa_new_1 <- oaa_new_1 %>% filter(species == i)
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
oaa_new_1 <- oaa_new_1 %>% filter(species == "i")
for (i in unique(oaa_new_1$species))
{
oaa_new_1 <- oaa_new_1 %>% filter(species == "i")
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_1 <- oaa_new_1 %>% filter(species == "i")
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
oaa_new_1
oaa_new_1
oaa_new_1 <- oaa%>%mutate(treat = treatment)  %>% unite(col = "group", c(loc, treat), sep = "")
oaa_new_1
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == "i")
abc <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
oaa_new_2
oaa_new_1
oaa_new_2 <- oaa_new_1 %>% filter(species == "acantho")
oaa_new_2
oaa <- na.omit(oaa)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == "i")
ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
}
oaa_new_1 <- oaa%>%mutate(treat = treatment)  %>% unite(col = "group", c(loc, treat), sep = "")
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == "i")
ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
}
oaa_new_2 <- oaa_new_1 %>% filter(species == "acantho")
oaa_new_2
ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == "i")
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
pictur
}
print(pictur)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == "i")
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
oaa_new_2 <
oaa_new_2 <- oaa_new_1 %>% filter(species == "acantho")
oaa_new_2 <- oaa_new_1 %>% filter(species == "acantho")
oaa_new_2
ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
plotfig <- function(specie,notfirst = F){
oaa_new_1 <- oaa %>% filter(species == specie)
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
oaa_new
oaa_new
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
>**Question 9**: Think about some things that can be improved in their code.
##**Question 9**: Think about some things that can be improved in their code.
##List 3 things you think could be improved and provide a brief explanation for why.
# 1)No ggplot package is used, only the original R is used, resulting in a huge amount of code and not too many comments, resulting in low readability of others, it will be better to use Rmarkdown
# 2) A large number of code is used to statistical testing. Many of them are useless in the final ploting, resulting in occupying a large amount of resources and running slowly, not concise.
# 3) The variable assignment is too casual, using too many variable names such as "chr1","qqp", making people forget the meaning of this variable when they see the code behind. And many variable names have been reused many times, can use new variable names  when changing.
library(tidyverse)
oaa <- read.csv('./data/OA_activitydat_20190302_BIOL3207.csv', header=TRUE)
oaa <- na.omit(oaa)
ggplot(oaa,aes(x = species, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)+geom_point(data = oaa_new_mean, aes(x = species, y = activity,col =  loc ),size = 3,shape = 21,stroke = 2)
oaa_new
ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))+scale_y_continuous(limits = c(0,70))
oaa_new_mean
oaa$loc = factor(oaa$loc, labels = c("15","14","16"))
oaa_new_1 <- oaa%>%mutate(treat = treatment)  %>% unite(col = "group", c(loc, treat), sep = "")
plotfig <- function(specie,notfirst = F){
oaa_new_1 <- oaa %>% filter(species == specie)
abc <- ggplot(oaa_new_1,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(abc)
}
plotfig("acantho")
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
oaa_new_2 <- oaa_new_1 %>% filter(species == "acantho")
oaa_new_2
ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_blank(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
q25 <-function(x){quantile(x,0.25)}
q75 <-function(x){quantile(x,0.75)}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75)aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75, col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75)+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75)+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75)+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_errorbar(aes(ymin = q25, ymax = q75))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
pictur <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(pictur)
}
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
}
"acantho" | 'lemon'|'chromis' | 'acantho'| 'humbug'|'whitedams'
"acantho"
acantho
print(acantho )
print(acantho)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
print(i)
}
print(i)
print(whitedams)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.25)
a <- print(i)
}
print(whitedams)
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
print(i)
}
``{r}
pictur <- function(specie){
oaa_new_2 <- oaa_new_1 %>% filter(species == specie)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
print(i)
}
pictur("acantho") | pictur('lemon')
pictur("acantho") | pictur('lemon')
pictur("acantho") + pictur('lemon')
pictur("acantho"and"lemon")
pictur("acantho" |"lemon")
pall <- cowplot::plot_grid(acantho)
i
typeof(i)
pictur <- function(specie){
oaa_new_2 <- oaa_new_1 %>% filter(species == specie)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
print(i)
}
pictur("acantho")
pictur("acantho") |pictur("acantho")
pictur("acantho", notfirst = FALSE) | pictur("acantho")
pictur <- function(specie,notfirst = TRUE){
oaa_new_2 <- oaa_new_1 %>% filter(species == specie)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
print(i)
}
pictur("acantho",notfirst = FALSE) | pictur("acantho")
pictur <- function(specie,notfirst = TRUE){
oaa_new_2 <- oaa_new_1 %>% filter(species == specie)
pict <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
pict <- pict + theme(legend.position="none", axis.text.y = element_blank()) + ylab(NULL)
pict
}
pictur("acantho",notfirst = FALSE) | pictur("acantho")
oaa_new_mean
oaa$loc = factor(oaa$loc, labels = c("15","14","16"))
oaa_new_1 <- oaa%>%mutate(treat = treatment)  %>% unite(col = "group", c(loc, treat), sep = "")
for (i in unique(oaa_new_1$species))
{
oaa_new_2 <- oaa_new_1 %>% filter(species == i)
i <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
print(i)
}
pictur <- function(specie,{
pictur <- function(specie){
oaa_new_2 <- oaa_new_1 %>% filter(species == specie)
pict <- ggplot(oaa_new_2,aes(x = group, y= activity)) + geom_boxplot(aes(col = treatment))+geom_jitter(aes(y = activity,col=treatment), width = 0.3)
pict
}
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Add your code here.
n_rep <- 100
permutation_result <- tibble()
for (i in unique(new_data$species))
{
samp_dist <- rep(0,n_rep)
print(i)
for (i in 1:n_rep){
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
samp_dist[i] <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
}
permutation_result <- rbind(sum(samp_dist)/n_rep)
}
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
#After conducting the above experiment, we found that in all six species, the differences in the mean between the treatment and control groups largely disappeared, so it can basically be assumed that the difference in activity was due to the different conditions in the treatment and control groups
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
str(outcome)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
as.tabble(new_stat.data)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
as.table(new_stat.data)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
flextable(new_stat.data)
#After conducting the above experiment, we found that in all six species, the differences in the mean between the treatment and control groups largely disappeared, so it can basically be assumed that the difference in activity was due to the different conditions in the treatment and control groups
outcome_permutation
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
outcome_permutation$estimate[1]
outcome_permutation$estimate[2]
outcome_permutation$conf.int
For my choosen species `r "whitedams"`: Mean activity for `r "whitedams"` in the control group was `r outcome_permutation$estimate[1]` (s / min) compared to the OA treatment group, which was `r outcome_permutation$estimate[2]` (s / min). The difference between control and OA treatment means was `r outcome_permutation$estimate[1]-outcome_permutation$estimate[2]` (s / min) (95% CI: `r outcome_permutation$conf.int[1]` to `r outcome_permutation$conf.int[2]`). Because the t-statistic is `r outcome_permutation$statistic`, df is `r outcome_permutation$parameter` the p-value is  `r outcome_permutation$p.value`, which is  than the significance level a = 0.05, providing a strong statistical support for accept the null hypothesis.The differences in the mean between the treatment and control groups largely disappeared, so it can basically be assumed that the difference in activity was due to the different conditions in the treatment and control groups.
For my choosen species `r "whitedams"`: Mean activity for `r "whitedams"` in the control group was `r outcome_permutation$estimate[1]` (s / min) compared to the OA treatment group, which was `r outcome_permutation$estimate[2]` (s / min). The difference between control and OA treatment means was `r outcome_permutation$estimate[1]-outcome_permutation$estimate[2]` (s / min) (95% CI: `r outcome_permutation$conf.int[1]` to `r outcome_permutation$conf.int[2]`). Because the t-statistic is `r outcome_permutation$statistic`, df is `r outcome_permutation$parameter` the p-value is  `r outcome_permutation$p.value`, which is  than the significance level a = 0.05, providing a strong statistical support for accept the null hypothesis.The differences in the mean between the treatment and control groups largely disappeared, so it can basically be assumed that the difference in activity was due to the different conditions in the treatment and control groups.
r outcome_permutation$p.value
outcome_permutation$p.value
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
#install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(plotrix)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = path)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data <- na.omit(data)
# Drop irrelevant columns
new_data <- subset(data, select = -c(comment, loc))
# Check spelling in species and treatment but also generate a summary table
unique(new_data$species)
unique(new_data$treatment)
#use unique to check spelling error, it seems no spelling error
mat <- summarise_at(group_by(new_data,species),vars(activity),funs(mean(.,),std.error(.,)))
# Use flextable to render the summary table in a tidy format
a <- summarise_at(group_by(new_data,species),vars(animal_id),funs(length(unique(.,))))
data_test <- subset(a, select = -c(species))
data_test2 <- cbind(mat,data_test)
data_test2
flextable(data_test2)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
task5 <- group_by(new_data,species,treatment)
ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
acantho <- image_read(path = './output/figures/acantho 05.07.38.png')
ambon <- image_read(path = './output/figures/ambon 05.07.38.png')
chromis <- image_read(path = './output/figures/chromis 05.07.38.png')
humbug <- image_read(path = './output/figures/humbug 05.07.38.png')
lemon <- image_read(path = './output/figures/lemon 05.07.38.png')
whitedams <- image_read(path = './output/figures/whitedams 05.07.38.png')
ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))+scale_y_continuous(limits = c(0,70)) +annotation_raster(acantho,0.5,1.4,60,73)+annotation_raster(ambon,1.5,2.4,60,73)+annotation_raster(chromis,2.5,3.4,60,73)+annotation_raster(humbug,3.5,4.4,60,73)+annotation_raster(lemon,4.5,5.4,60,73)+annotation_raster(whitedams,5.5,6.4,60,73)
# Use ggsave to save the figure
#make sure my file paths point to a correct location by using the package here, which also provides convenience when others use my file
library(here)
ggsave(filename = here("output/figures","fig1.png"))
## Once I  have added `output/figures/` to your `.gitignore` file, the change in output/figures/ folder will not be saved and tracked in github. It is a best way to Ignoring figures.
## I  want to trank the files, because this is the result of the code running, on the one hand, if I change my code but the output images don't change, this can cause misunderstandings to people using my project, on the other hand, these images are the result of the code run and are part of our project, so even though they are .png files, I still keep track and uploading them
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
task6 <- new_data  %>% filter(species %in% c("chromis", "lemon",  "acantho"))
task6
task6.1 <- group_by(task6,species,treatment)
ggplot(task6.1, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
#use for loop to do this
for (i in unique(new_data$species))
{
print(i)
new_name <- new_data %>%  filter(species == i)
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# a easier way to do this
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
outcome_permutation$p.value
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
#After conducting the above experiment, we found that in all six species, the differences in the mean between the treatment and control groups largely disappeared, so it can basically be assumed that the difference in activity was due to the different conditions in the treatment and control groups
# a easier way to do this
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
flextable(stat.test)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
flextable(new_stat.test)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
flextable(new_stat.data)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
flextable(new_stat.data)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
#install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(plotrix)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "data/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = path)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data <- na.omit(data)
# Drop irrelevant columns
new_data <- subset(data, select = -c(comment, loc))
# Check spelling in species and treatment but also generate a summary table
unique(new_data$species)
unique(new_data$treatment)
#use unique to check spelling error, it seems no spelling error
mat <- summarise_at(group_by(new_data,species),vars(activity),funs(mean(.,),std.error(.,)))
# Use flextable to render the summary table in a tidy format
a <- summarise_at(group_by(new_data,species),vars(animal_id),funs(length(unique(.,))))
data_test <- subset(a, select = -c(species))
data_test2 <- cbind(mat,data_test)
data_test2
flextable(data_test2)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
task5 <- group_by(new_data,species,treatment)
ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
acantho <- image_read(path = './output/figures/acantho 05.07.38.png')
ambon <- image_read(path = './output/figures/ambon 05.07.38.png')
chromis <- image_read(path = './output/figures/chromis 05.07.38.png')
humbug <- image_read(path = './output/figures/humbug 05.07.38.png')
lemon <- image_read(path = './output/figures/lemon 05.07.38.png')
whitedams <- image_read(path = './output/figures/whitedams 05.07.38.png')
ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))+scale_y_continuous(limits = c(0,70)) +annotation_raster(acantho,0.5,1.4,60,73)+annotation_raster(ambon,1.5,2.4,60,73)+annotation_raster(chromis,2.5,3.4,60,73)+annotation_raster(humbug,3.5,4.4,60,73)+annotation_raster(lemon,4.5,5.4,60,73)+annotation_raster(whitedams,5.5,6.4,60,73)
# Use ggsave to save the figure
#make sure my file paths point to a correct location by using the package here, which also provides convenience when others use my file
library(here)
ggsave(filename = here("output/figures","fig1.png"))
## Once I  have added `output/figures/` to your `.gitignore` file, the change in output/figures/ folder will not be saved and tracked in github. It is a best way to Ignoring figures.
## I  want to trank the files, because this is the result of the code running, on the one hand, if I change my code but the output images don't change, this can cause misunderstandings to people using my project, on the other hand, these images are the result of the code run and are part of our project, so even though they are .png files, I still keep track and uploading them
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
task6 <- new_data  %>% filter(species %in% c("chromis", "lemon",  "acantho"))
task6
task6.1 <- group_by(task6,species,treatment)
ggplot(task6.1, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
#use for loop to do this
for (i in unique(new_data$species))
{
print(i)
new_name <- new_data %>%  filter(species == i)
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# a easier way to do this
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
flextable(new_stat.data)
