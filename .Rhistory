ggplot(task5, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
# Use ggsave to save the figure
ggsave("prettyfig.png")
## Write your answer here
## I don't want to trank the files, because we usually won't change the .png files and  png figures can take up a tonne of space, will slow down our upload speed and occupy a lot of resources
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
task6 <- new_data  %>% filter(species %in% c("chromis", "lemon",  "acantho"))
task6
task6.1 <- group_by(task6,species,treatment)
ggplot(task6.1, aes(x = species, y = activity)) + geom_boxplot(aes(col = treatment))
new_data
lapply(new_data[-1], function(x) t.test(x ~ new_data$Label))
new_data
lapply(new_data[-1], function(x) t.test(x ~ new_data$treatment))
new_data
lapply(new_data[-2], function(x) t.test(x ~ new_data$treatment))
str(new_data)
str(new_data)
lapply(new_data[-2], function(x) t.test(x ~ new_data$treatment))
str(new_data)
lapply(new_data[-1], function(x) t.test(x ~ new_data$species))
str(new_data)
lapply(new_data[-2], function(x) t.test(x ~ new_data$treatment))
str(new_data)
lapply(new_data[-3], function(x) t.test(x ~ new_data$treatment))
str(new_data)
lapply(new_data[-3], function(x) t.test(x ~ new_data$treatment))
new_data
new_data
lapply(new_data[2], function(x) t.test(x ~ new_data$treatment))
new_data
lapply(new_data[2], function(x) t.test(x ~ new_data$treatment))
new_data[2]
new_data
lapply(new_data[2], function(x) t.test(x ~ new_data$treatment))
new_data
lapply(new_data[2], function(x) t.test(x ~ new_data$activity))
new_data
lapply(new_data[7], function(x) t.test(x ~ new_data$treatment))
new_data[2]
new_data
lapply(group_by(new_data,species), function(x) t.test(x ~ new_data$treatment))
new_data
lapply(new_data[7], function(x) t.test(x ~ group_by(new_data,species)$treatment))
new_data[2]
new_data
lapply(new_data[7], function(x) t.test(x ~ group_by(new_data,species)$treatment))
group_by(new_data,species)$treatment)
new_data
lapply(new_data[7], function(x) t.test(x ~ group_by(new_data,species)$treatment))
group_by(new_data,species)
new_data
lapply(new_data[7], function(x) t.test(x ~ group_by(new_data,species)$treatment))
a <- group_by(new_data,species)
a
new_data
a <- group_by(new_data,species)
a
lapply(new_data[7], function(x) t.test(x ~ a$treatment))
stat.test <- new_data %>%
group_by(species) %>%
t_test(activity ~ treatment) %>%
adjust_pvalue(method = "BH") %>%
add_significance()
library(rstatix)
install.packages("rstatix")
stat.test <- new_data %>%
group_by(species) %>%
t_test(activity ~ treatment)
stat.test <- new_data %>%
group_by(species) %>%
t.test(activity ~ treatment)
stat.test <-
group_by(new_data, species) %>%
t.test(activity ~ treatment)
new_data[.1]
new_data[,1]
new_data[,2]
new_data[2]
install.packages(("restatix"))
install.packages(("rstatix"))
install.packages(("rstatix"))
install.packages(("rstatix"))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
librery(restatix)
library(restatix)
library(rstatix)
install.packages("rstatix")
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment) %>% add_significance()
stat.test
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment) %>% add_significance()
stat.test
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t.test(activity ~ treatment) %>% add_significance() %>%
stat.test
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment) %>% add_significance() %>%
stat.test
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t.test(activity ~ treatment) %>% add_significance()
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment) %>% add_significance()
stat.test
library(rstatix)
new_data[2]
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(testData[-2], function(x) t.test(x ~ new_data$treatment))
lapply(new_data[-2], function(x) t.test(x ~ new_data$treatment))
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
t.test()
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(unique(new_data[-2]), function(x) t.test(x ~ new_data$treatment))
unique(new_data[-2])
new_data[-2]
lapply(unique(new_data[2]), function(x) t.test(x ~ new_data$treatment))
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(unique(new_data[2]), function(x) t.test(x ~ new_data$treatment))
for i in new_data_species:
for i in new_data_species
for i in new_data$species:
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(unique(new_data[2]), function(x) t.test(x ~ new_data$treatment))
for (i in new_data$species)
{
t.test(i ~ new_data$treatment)
t.test
}
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(unique(new_data[2]), function(x) t.test(x ~ new_data$treatment))
for (i in new_data$species)
{
t_test(acticity~ new_data$treatment)
t_test
}
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
tibble(stat.test)
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
stat.test
lapply(new_data[group_by(new_data, species)], function(x) t.test(x ~ new_data$treatment,)
lapply(new_data[group_by(new_data, species)], function(x) t.test(x ~ new_data$treatment)
lapply(new_data[group_by(new_data, species)], function(x) t.test(x ~ new_data$treatment))
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
lapply(new_data[2], function(x) t.test(x ~ new_data$treatment))
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
stat.test
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
for (i in new_data$species)
{
}
new_name <- new_data %>%  filter(species = "acantho")
new_name <- new_data %>%  filter(species == "acantho")
new_name
for (i in new_data$species)
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == "i")
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity %>% filter(treatment == "control"), new_name$activity %>% filter(treatment == "CO2"))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
for (i in new_data$species)
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == "i")
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity %>% filter(treatment == "control"), new_name$activity %>% filter(treatment == "CO2"))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in new_data$species)
{
print(i)
}
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == "i")
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity %>% filter(treatment == "control"), new_name$activity %>% filter(treatment == "CO2"))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in unique(new_data$species))
{
print(i)
}
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity %>% filter(treatment == "control"), new_name$activity %>% filter(treatment == "CO2"))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in unique(new_data$species))
{ new_name <- new_data %>%  filter(species == i)
print(i)
}
for (i in unique(new_data$species))
{ new_name <- new_data %>%  filter(species == i)
print(new_name)
}
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity %>% filter(treatment == control), new_name$activity %>% filter(treatment == CO2))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in unique(new_data$species))
{ new_name <- new_data %>%  filter(species == i)
print(new_name)
}
outcome <- t.test(new_name$activity %>% filter(treatment == "control"), new_name$activity %>% filter(treatment == "CO2"))
(new_name$activity %>% filter(treatment == "control")
(new_name$activity %>% filter(treatment == "control")
new_name$activity %>% filter(treatment == "control")
new_name$activity %>% filter(treatment == "control")
new_name$activity %>% filter(treatment == "control")
new_data$activity %>% filter(treatment == "control")
new_data %>% filter(treatment == "control") %>% select(activity)
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity  %>% filter(treatment == "control") %>% select(activity), new_name$activity %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name$activity  %>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
new_data %>% filter(treatment == "CO2") %>% select(activity)
new_data %>% filter(treatment == "control") %>% select(activity)
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
colnames(new_col) <- new_name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,new_col)
}
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,outcome)
}
per_tibble <- tibble(1:6)
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,outcome)
}
perm_tibble <- tibble(1:6)
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
# Attach the permuted column to the end of the growing tibble
perm_tibble <- cbind(perm_tibble,outcome)
}
perm_tibble <- tibble(1:6)
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
print(outcome)
# Attach the permuted column to the end of the growing tibble
}
new_name <- new_data %>%  filter(species == "acantho")
t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
for (i in unique(new_data$species))
{
# Name the permutation reps P1,P2,...
new_name <- new_data %>%  filter(species == i)
# Generate a permuted column of body mass values. Note that this is equivalent     to permuting the species labels; however, permuting values makes the plotting     easier
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
# Assign the new column its name
print(outcome)
# Attach the permuted column to the end of the growing tibble
}
123 <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
aaa <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
str(aaa)
aaa <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
str(aaa)
as.tibble(aaa$statisic,aaa$p.value,aaa$conf.int,)
new_name <- new_data %>%  filter(species == "acantho")
aaa <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
str(aaa)
as.table(aaa$statisic,aaa$p.value,aaa$conf.int,)
new_name <- new_data %>%  filter(species == "acantho")
aaa <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
str(aaa)
cbind(aaa$statisic,aaa$p.value,aaa$conf.int,)
cbind(aaa$statisic,aaa$p.value,aaa$conf.int)
for (i in unique(new_data$species))
{
print(i)
new_name <- new_data %>%  filter(species == i)
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
#use for loop to do this
for (i in unique(new_data$species))
{
print(i)
new_name <- new_data %>%  filter(species == i)
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# a easier way to do this
library(rstatix)
stat.test <- group_by(new_data, species) %>% t_test(activity ~ treatment)
stat.test
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
new_stat.data <- subset(stat.test, select = -c(.y., group1,group2,n1,n2))
new_stat.data
str(outcome)
str(outcome)$eestimate[1]
str(outcome)$eestimate[1]
str(outcome)$eestimate[1]
str(outcome)$estimate[1]
str(outcome)$estimate
str(outcome)$estimate
a <- str(outcome)$estimate
a <- str(outcome)
a$estimate
a$estimate
a <- str(outcome)
a$statistic
a <- summary(outcome)
a$statistic
a
a <- str(outcome)
a %>% filter(statistc)
str(outcome)
outcome$statistic
outcome
str(outcome)
outcome$estimate[1]
str(outcome)
outcome$eestimate[2]
outcome$estimate[2]
outcome$eestimate[1]-outcome$eestimate[2]
outcome$estimate[1]-outcome$estimate[2]
str(outcome)
Mean activity for `r "whitedams"` in the control group was `r "outcome$estimate[1]"` (s / min) compared to the OA treatment group, which was `r "outcome$estimate[2]"` (s / min). The difference between control and OA treatment means was `r "outcome$estimate[1]-outcome$estimate[2]"` (s / min) (95% CI: `r "outcome$conf.int[1]"` to `r "outcome$conf.int[2]"`).
sample(new_data$activity, replace = F)
sample(new_data$activity[which(new_data$species==i)], replace = F)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_group_data %>% filter(species==i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
permuted_group_data
new_data[which(new_data$species==i)]
new_data[which(new_data$species==i)]
new_data[which(new_data$species==i)]
new_data
permuted_group_data
new_data
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_group_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
# Add your code here.
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(new_data$activity[which(new_data$species==i)], replace = F)
permuted_group_data <- new_data %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
GitHub is not a automate backup system, when we want to back up somthing, we need to upload it by myself. But for most back up system, like icloud, it will automatly backup my file.
#GitHub is not a automate backup system, when we want to back up somthing, we need to upload it by myself. But for most back up system, like icloud, it will automatly backup my file.
## Write your answer here.
#GitHub is not a automate backup system, when we want to back up somthing, we need to upload it by myself. But for most back up system, like icloud, it will automatly backup my file.
## Write your answer here.
#GitHub is not a automate backup system, when we want to back up somthing, we need to upload it by myself. But for most back up system, like icloud, it will automatly backup my file.
## Write your answer here.
# Use ggsave to save the figure
ggsave("prettyfig.png", path = output/figures/ )
# Use ggsave to save the figure
ggsave("prettyfig.png", path = output/figures/)
# Use ggsave to save the figure
ggsave("prettyfig.png", path = "output/figures/")
library(ggplot2)
ggsave("prettyfig.png", path = "output/figures/")
# Use ggsave to save the figure
ggsave("prettyfig.png", path = "./output/figures/")
# Use ggsave to save the figure
ggsave("prettyfig.png", path = "/output/figures/")
# Use ggsave to save the figure
ggsave("prettyfig.png")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
#install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
#install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
